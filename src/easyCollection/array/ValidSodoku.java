package easyCollection.array;

import java.util.HashSet;

public class ValidSodoku {


    public static boolean checkUnique(char[] board) {
        HashSet<Character> unique = new HashSet<>();
        for(int i=0;i<board.length;i++){
            if(board[i] != '.' && unique.contains(board[i])){
                return false;
            }
            unique.add(board[i]);
        }
        return true;
    }

    public static boolean isValidSudoku(char[][] board) {
        char[] x = new char[9];
        char[][] rotatedboard = new char[9][9];
        for (int i = 0; i < 9; i+=3) {
            for (int j = 0; j < 9; j+=3) {
                x[0] = board[i][j];
                x[1] = board[i][j + 1];
                x[2] = board[i][j + 2];
                x[3] = board[i + 1][j];
                x[4] = board[i + 1][j + 1];
                x[5] = board[i + 1][j + 2];
                x[6] = board[i + 2][j];
                x[7] = board[i + 2][j + 1];
                x[8] = board[i + 2][j + 2];
                if(checkUnique(x) == false){
                    return false;
                }
            }
        }
        for(int i=0;i<board.length;i++){
            if(checkUnique(board[i]) == false){
                return false;
            };
        }


        for(int i=0;i<board.length;i++){
            for(int j=0;j<9;j++){
                rotatedboard[j][i]= board[i][j];
            }
        }
        for(int i=0;i<rotatedboard.length;i++){
            if(checkUnique(rotatedboard[i]) == false){
                return false;
            };
        }
        return true;
    }




    public static void main(String[] args) {
        char[][] board = {{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                        {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                        {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                        {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                        {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                        {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                        {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                        {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                        {'.', '.', '.', '.', '8', '.', '.', '7', '9'}}; // true
        char board2[][] = {{'8', '3', '.', '.', '7', '.', '.', '.', '.'}
                , {'6', '.', '.', '1', '9', '5', '.', '.', '.'}
                , {'.', '9', '8', '.', '.', '.', '.', '6', '.'}
                , {'8', '.', '.', '.', '6', '.', '.', '.', '3'}
                , {'4', '.', '.', '8', '.', '3', '.', '.', '1'}
                , {'7', '.', '.', '.', '2', '.', '.', '.', '6'}
                , {'.', '6', '.', '.', '.', '.', '2', '8', '.'}
                , {'.', '.', '.', '4', '1', '9', '.', '.', '5'}
                , {'.', '.', '.', '.', '8', '.', '.', '7', '9'}};
        char board3[][] = {{'.', '.', '.', '9', '.', '.', '.', '.', '.'},
                {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'.', '.', '3', '.', '.', '.', '.', '.', '1'},
                {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'1', '.', '.', '.', '.', '.', '3', '.', '.'},
                {'.', '.', '.', '.', '2', '.', '6', '.', '.'},
                {'.', '9', '.', '.', '.', '.', '.', '7', '.'},
                {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'8', '.', '.', '8', '.', '.', '.', '.', '.'}};

        char board4[][] = {{'.', '.', '.', '.', '5', '.', '.', '1', '.'},
                {'.', '4', '.', '3', '.', '.', '.', '.', '.'},
                {'.', '.', '.', '.', '.', '3', '.', '.', '1'},
                {'8', '.', '.', '.', '.', '.', '.', '2', '.'},
                {'.', '.', '2', '.', '7', '.', '.', '.', '.'},
                {'.', '1', '5', '.', '.', '.', '.', '.', '.'},
                {'.', '.', '.', '.', '.', '2', '.', '.', '.'},
                {'.', '2', '.', '9', '.', '.', '.', '.', '.'},
                {'.', '.', '4', '.', '.', '.', '.', '.', '.'}};
        System.out.println(isValidSudoku(board));
    }
}
